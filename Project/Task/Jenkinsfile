pipeline {
    agent {
        node {
            label 'slave1'
        }
    }
    tools {
             maven 'MAVEN_HOME'
             jdk 'JAVA_HOME'
    }
    stages {
        stage('Git Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'github access', url: 'https://github.com/kalagaGangadhar/Project-Management.git']]])
                sh 'pwd'
            }
        }

        stage('Terraform init') {
            steps {
                dir('Project/Task'){
                  sh 'terraform init'
                  sh 'pwd'
                }
            }

        }
        stage('Terraform validate') {
            steps {
                dir('Project/Task'){
                  sh 'terraform validate'
                  sh 'pwd'
                }
            }
        }
        stage('Terraform plan') {
            steps {
                dir('Project/Task'){
                  sh 'terraform plan'
                  sh 'pwd'
                }
            }
        }
        stage('Terraform apply/destroy') {
            parallel {
                stage('Terraform apply') {
                    when {
                        expression {
                            "$State" == "apply"
                        }
                    }
                    steps {
                        dir('Project/Task'){
                          sh 'terraform apply --auto-approve'
                          sh 'pwd'
                          sh 'mvn --version'
                        }
                    }
                }
                stage('Terraform destroy') {
                    when {
                        expression {
                            "$State" == "destroy"
                        }
                    }
                    steps {
                        dir('Project/Task'){
                          sh 'terraform destroy --auto-approve'
                          sh 'pwd'
                        }
                    }
                }
            }
        }
        stage ('Build War file') {
            when {
                expression {
                    "$State" == "apply"
                }
            }
            steps {
                sh "mvn install"
                sh "cp -r ${WORKSPACE}/webapp/target/webapp.war /var/lib/jenkins/"
            }
        }
        stage('Ansible Deployment') {
            when {
                expression {
                    "$State" == "apply"
                }
            }
            steps {
                script {
                    sh "ansible-playbook -i /var/lib/jenkins/inventory Project/Task/webserver-tomcat.yml -vv"
                }
            }
        }
        stage('Clear Inventory') {
            when {
                expression {
                    "$State" == "destroy"
                }
            }
            steps {
                sh 'pwd'
                sh 'echo [webserver] > /var/lib/jenkins/inventory'
            }
        }
    }
}